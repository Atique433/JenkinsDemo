what is collection Framework?

- it is a readymade architecture to store and manipulate data, in other word it provides an enviroment, in which data structure can be implemented.

The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.

Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.

Java Collection means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque) and
 classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).


>>Iterator interface
----------------------
Iterator interface provides the facility of iterating the elements in a forward direction only.
Methods of Iterator interface
There are only three methods in the Iterator interface. They are:

1-public boolean hasNext()	It returns true if the iterator has more elements otherwise it returns false.

>>Iterable Interface
-------------------------
The Iterable interface is the root interface for all the collection classes. The Collection interface extends the Iterable interface and therefore all 
the subclasses of Collection.
interface also implement the Iterable interface.

It contains only one abstract method. i.e.,
Iterator<T> iterator()

>>List Interface
----------------
List interface is the child interface of Collection interface. It inhibits a list type data structure
in which we can store the ordered collection of objects. It can have duplicate values.

List interface is implemented by the classes ArrayList, LinkedList, Vector, and Stack.

To instantiate the List interface, we must use :

List <data-type> list1= new ArrayList();  
List <data-type> list2 = new LinkedList();  
List <data-type> list3 = new Vector();  
List <data-type> list4 = new Stack();    




1.Arraylist...
-------------------
The ArrayList class implements the List interface. It uses a dynamic array to store the duplicate element of different data types. 
The ArrayList class maintains the insertion order and is non-synchronized. The elements stored in the ArrayList class can be randomly accessed. 
Consider the following example.

import java.util.*;  
class TestJavaCollection1{  
public static void main(String args[]){  
ArrayList<String> list=new ArrayList<String>();//Creating arraylist  
list.add("Ravi");//Adding object in arraylist  
list.add("Vijay");  
list.add("Ravi");  
list.add("Ajay");  
//Traversing list through Iterator  
Iterator itr=list.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}  

LinkedList
------------------
LinkedList implements the Collection interface. It uses a doubly linked list internally to store the elements. It can store the duplicate elements.
 It maintains the insertion order and is not synchronized. In LinkedList, the manipulation is fast because no shifting is required.

Consider the following example.

import java.util.*;  
public class TestJavaCollection2{  
public static void main(String args[]){  
LinkedList<String> al=new LinkedList<String>();  
al.add("Ravi");  
al.add("Vijay");  
al.add("Ravi");  
al.add("Ajay");  
Iterator<String> itr=al.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}  

Vector
----------
Vector uses a dynamic array to store the data elements. It is similar to ArrayList. However, It is synchronized and contains many methods
that are not the part of Collection framework.

>>Set Interface
-----------------
Set Interface in Java is present in java.util package. It extends the Collection interface. It represents the unordered set of elements which doesn't
allow us to store the duplicate items. We can store at most one null value in Set. Set is implemented by HashSet, LinkedHashSet, and TreeSet.

Set can be instantiated as:

Set<data-type> s1 = new HashSet<data-type>();  
Set<data-type> s2 = new LinkedHashSet<data-type>();  
Set<data-type> s3 = new TreeSet<data-type>();  


HashSet
----------
HashSet class implements Set Interface. It represents the collection that uses a hash table for storage. Hashing is used to store the elements in the 
HashSet. It contains unique items.

Consider the following example.

import java.util.*;  
public class TestJavaCollection7{  
public static void main(String args[]){  
//Creating HashSet and adding elements  
HashSet<String> set=new HashSet<String>();  
set.add("Ravi");  
set.add("Vijay");  
set.add("Ravi");  
set.add("Ajay");  
//Traversing elements  
Iterator<String> itr=set.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}  


LinkedHashSet
--------------
LinkedHashSet class represents the LinkedList implementation of Set Interface. It extends the HashSet class and implements Set interface. Like HashSet, 
It also contains unique elements. It maintains the insertion order and permits null elements.

Consider the following example.

import java.util.*;  
public class TestJavaCollection8{  
public static void main(String args[]){  
LinkedHashSet<String> set=new LinkedHashSet<String>();  
set.add("Ravi");  
set.add("Vijay");  
set.add("Ravi");  
set.add("Ajay");  
Iterator<String> itr=set.iterator();  
while(itr.hasNext()){  
System.out.println(itr.next());  
}  
}  
}  

TreeSet
--------
Java TreeSet class implements the Set interface that uses a tree for storage. Like HashSet, TreeSet also contains unique elements. However, 
the access and retrieval time of TreeSet is quite fast. The elements in TreeSet stored in ascending order.

----------------------------------------------------------*******************************************---------------------------------------------------
Java ArrayList
-----------------------
Java ArrayList class uses a dynamic array for storing the elements. It is like an array, but there is no size limit. We can add or remove elements anytime. 
So, it is much more flexible than the traditional array. It is found in the java.util package. It is like the Vector in C++.

1.Java ArrayList class can contain duplicate elements.
2.Java ArrayList class maintains insertion order.
3.Java ArrayList class is non synchronized.
4.Java ArrayList allows random access because array works at the index basis.
5.In ArrayList, manipulation is little bit slower than the LinkedList in Java because a lot of shifting needs to occur if any element is removed from 
the array list.
                       iterator interface
                         |
                        interface
                         |
                       list interface
                         |
                       abstract list class
                         |
                       arraylist class

>>Java Map Interface
------------------
A map contains values on the basis of key, i.e. key and value pair. Each key and value pair is known as an entry. A Map contains unique keys.
A Map doesn't allow duplicate keys, but you can have duplicate values. HashMap and LinkedHashMap allow null keys and values, 
but TreeMap doesn't allow any null key or value.



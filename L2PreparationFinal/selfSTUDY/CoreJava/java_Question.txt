2. what is hashMap and Map?
> The Map is an interface in Java used to map the key-pair values. It is used to insert, update, remove the elements. 
  Whereas the HashMap is a class of Java collection framework. It allows to store the values in key-pair combination; it does not allow duplicate keys, 
  however, we can store the duplicate values.

3.Difference between HashMap and HashTable? Can we make hashmap synchronized?
> Hashtable is synchronized, whereas HashMap is not.
  Hashtable does not allow null keys or values. HashMap allows one null key and any number of null values.
  HashMap is fast whereas Hashtable is slow.
  HashMap is traversed by Iterator ,Hashtable is traversed by Enumerator and Iterator.

4. Difference between Vector and ArrayList?
>  1) ArrayList is not synchronized--------Vector is synchronized.
   2) ArrayList increments 50% of current array size if the number of elements exceeds from its capacity.	
   Vector increments 100% means doubles the array size if the total number of elements exceeds than its capacity.
   3) ArrayList is not a legacy class,It is introduced in JDK 1.2--------Vector is a legacy class.
   4) ArrayList is fast because it is non-synchronized.----Vector is slow because it is synchronized.
   5) ArrayList uses the Iterator interface to traverse the elements.----A Vector can use the Iterator interface or Enumeration interface 
                                                                       to traverse the elements.

5. What is an Iterator?
>  Iterator interface provides the facility of iterating the elements in a forward direction only.

6. List vs Set vs Map. Purposes and definitions.?
>  list is ordered and can contain the same elements in it.
   Set is unordered and contains different elements.
   Map contains the data in the key-value pair.

7. Pros and cons of ArrayList and LinkedList?
>  LinkedList is fast for adding and deleting elements, but slow to access a specific element. ArrayList is fast for accessing a specific element 
   but can be slow to add to either end, and especially slow to delete in the middle.

8. TreeSet vs LinkedHashSet?
>  TreeSet performance is better than LinkedHashSet except for insertion and removal operations because it has to sort the elements after 
   each insertion and removal operation. 
   LinkedHashSet allows only one null value. TreeSet does not permit null value.

9. What are relationships between equals and hash codes?
>  If two objects are equal according to equals() method then the hashCode() method should return the same integer value for both the objects.

10. What are the advantages of ArrayList over arrays ?
>   You can define ArrayList as re-sizable array. ...
    Elements can be inserted at or deleted from a particular position. ...
    ArrayList class has many methods to manipulate the stored objects. ...
    If generics are not used, ArrayList can hold any type of objects.

11. Principle of storing data in a hashtable?
>Hashtable datastructure is an array of buckets which stores the key,value pairs in them. It uses hashCode() method to
determine which bucket the key,value pair should map.
The hash function helps to determine the location for a given key in the bucket list.hashcode generates a non-negative integer. 
To determine whether two objects are equal or not, hashtable makes use of the equals() method.

12. Differences between Hashtable, ConcurrentHashMap and Collections.synchronizedMap()
>Hashtable:
Hashtable is synchronized, preventing two threads from accessing it at the same time. A this 
class was implement the Map interface, making it a member of the Java Collections Framework.
HashMap is useful for single-threaded access.
 
HashMap
If a thread-safe implementation is not needed, it is recommended to use HashMap in place of Hashtable.HashMap is not synchronized. 
If multiple threads access a hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally.
HashMap is useful for single-threaded access.

ConcurrentHashMap
If a thread-safe highly-concurrent implementation is desired, then it is recommended to use ConcurrentHashMap in place of Hashtable.
In ConcurrentHashMap, Iterators and Enumerations return elements reflecting the state of the hash table at some point . 
ConcurrentHashMap allows updates and iteration by multiple threads.

13. How are hash codes computed?
> hashCode() method returns the hash code for the Method class object. The hashcode returned is computed by exclusive-or 
operation on the hashcodes for the method’s declaring class name and the method’s name. The hashcode is always the same if the 
object doesn’t change. Hashcode is a unique code generated by the JVM at time of object creation. An object can also be searched 
with this unique code.


14. Is it possible that hash code is not unique?
>  If two Objects are equal according to equal() and it can be done with the help of overriding hashcode method according to the
   states of an object and if two objects have same states then it is possible, then calling the hashcode method on each of those
   two objects should produce same hashcode.

15. Can we put two elements with equal hash code to one hash map?
>  yes we can but when we want elements or iterating elements the latest value will be shown and it will compare with the help of equals() method
   and the last elements will override the first added elements if same hash code is present.


16. Iterator and modification of a List. ConcurentModificationException.
ConcurrentModificationException occurs when you modify the list (by adding or removing elements) 
while traversing a list with Iterator.

17. What is the significance of ListIterator? What is the difference b/w Iterator and ListIterator?
>1.Iterator can traverse only in forward direction whereas ListIterator traverses both in forward and backward directions.
 2.ListIterator can help to replace an element whereas Iterator cannot.
 3.ListIterator can only used in list interface but Iterator helps in traversing Map, List and Set.

18. What is the collection API in Java?
 The Java Collections API provide Java developers with a set of classes and interfaces that makes it easier to work with collections of objects,
 e.g. lists, maps, stacks etc. Rather than having to write your own collection classes, Java provides these ready-to-use collection classes for you

19. How can we access elements of a collection?
	1.with the help of "For each loop"
	2.with the help of "iterator".
	3.Normal "For loop".
	4.using "List Iterator".(FOR LIST)
	5.using "Enumerator"
	6.usinng while loop

20. What is the difference between a queue and a stack?
  1.stack follows linear data structure. The objects are removed and inserted from the same end.
  1.queue is also a linear data structure. The objects are removed and inserted from two different ends.
  2.Stack follows the Last In, First Out (LIFO) principle. It means that the last inserted element gets deleted at first.
  2.queue follows the First In, First Out (FIFO) principle. It means that the First inserted element gets deleted at first.
  3.Stack has only one pointer i.e. top.
  3.queue uses two pointers for reading and writing data from both the ends- the front and the rear.
  4.Stack uses push and pop as two of its operations.
  4.Queue uses enqueue and dequeue as two of its operations. 
  5.In stack Insertion and deletion of elements take place from one end only.
  5.queue uses two ends- front and rear. Insertion uses the rear end, and deletion uses the front end.
  6.Stack data structure does not have any types.
  6.Queue data structure has three types- circular queue, priority queue, and double-ended queue.
  7.visualize the Stack as a vertical collection.
  7.visualize a Queue as a horizontal collection.

21. What is the Properties class?
Properties is a subclass of Hashtable. It is used to maintain lists of values in which the key is a String and the value is 
also a String.The Properties class is used by many other Java classes. For example, it is the type of object returned by 
System.getProperties( ) when obtaining environmental values.
	
22. Which implementation of the List interface provides for the fastest insertion of a new element into the middle of the list?
The LinkedList is implemented using a doubly linked list; an insertion requires only the updating of the links at the point of insertion. 
Therefore, the LinkedList allows for fast insertions and deletions

23. How can we use hashset in collection interface?
It creates a collection that uses hash table for storage. 
A hash table stores information by using a mechanism called hashing.
HashSet does not maintain any order of elements.HashSet contains only unique elements.
It allows to store null value.It is non synchronized.It is the best approach for search operations.
The initial default capacity of HashSet is 16. 
This class offers constant time performance.

25. Can you limit the initial capacity of vector in java?
Yes we can limit the initial capacity. We can construct an empty vector with specified initial capacity
public vector(int initialcapacity)

26. What method should the key class of Hashmap override?
The methods to override are equals() and hashCode().

27. What is the difference between Enumeration and Iterator?
The functionality of Enumeration interface is duplicated by the Iterator interface. Iterator has a remove() method while 
Enumeration doesn't. Enumeration acts as Read-only interface, because it has the methods only to traverse and fetch the objects, 
where as using Iterator we can manipulate the objects also like adding and removing the objects.
So Enumeration is used when ever we want to make Collection objects as Read-only.

28. Collections class and Arrays class
Arrays class
The Arrays class in java.util package is a part of the Java Collection Framework. This class provides static methods to dynamically 
create and access Java arrays. It consists of only static methods and the methods of Object class. 
some common methods of Arrays classs are
binarySearch()
compare(array 1, array 2)
equals(array1, array2)
sort(originalArray)

Collections class
Collections class is a member of the Java Collections Framework. It is present in java.util.Collections package, Collections class 
is basically used with the static methods that operate on the collections or return the collection. 
All the methods of this class throw the NullPointerException if the collection or object passed to the methods is null. 
Some common methods of Collection classes
swap()
rotate()
shuffle()
min()
max()
reverse()
binarySearch()
copy()
singleton()
unmodifiableCollection() 







   